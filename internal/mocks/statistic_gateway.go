// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/sterligov/banner-rotator/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// StatisticGateway is an autogenerated mock type for the StatisticGateway type
type StatisticGateway struct {
	mock.Mock
}

// FindStatistic provides a mock function with given fields: ctx, slotID, groupID
func (_m *StatisticGateway) FindStatistic(ctx context.Context, slotID int64, groupID int64) ([]model.Statistic, error) {
	ret := _m.Called(ctx, slotID, groupID)

	var r0 []model.Statistic
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []model.Statistic); ok {
		r0 = rf(ctx, slotID, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Statistic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, slotID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementClicks provides a mock function with given fields: ctx, bannerID, slotID, groupID
func (_m *StatisticGateway) IncrementClicks(ctx context.Context, bannerID int64, slotID int64, groupID int64) error {
	ret := _m.Called(ctx, bannerID, slotID, groupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) error); ok {
		r0 = rf(ctx, bannerID, slotID, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncrementShows provides a mock function with given fields: ctx, bannerID, slotID, groupID
func (_m *StatisticGateway) IncrementShows(ctx context.Context, bannerID int64, slotID int64, groupID int64) error {
	ret := _m.Called(ctx, bannerID, slotID, groupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) error); ok {
		r0 = rf(ctx, bannerID, slotID, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
